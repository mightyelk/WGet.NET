<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WGet.NET</name>
    </assembly>
    <members>
        <member name="T:WGetNET.ProcessManager">
            <summary>
            The <see langword="internal"/> class <see cref="T:WGetNET.ProcessManager"/> 
            provides the winget process execution.
            </summary>
        </member>
        <member name="M:WGetNET.ProcessManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.ProcessManager"/> class.
            </summary>
            <param name="processName">
            The name of the process to execute.
            </param>
        </member>
        <member name="M:WGetNET.ProcessManager.ExecuteWingetProcess(System.String)">
            <summary>
            Executes a winget process with the given command and returns the result.
            </summary>
            <param name="cmd">
            A <see cref="T:System.String"/> representing the command that winget should be executed with.
            </param>
            <returns>
            A <see cref="T:WGetNET.ProcessResult"/> object, 
            containing the output an exit id of the process.
            </returns>
        </member>
        <member name="M:WGetNET.ProcessManager.ExecuteWingetProcessAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronous executes a winget process with the given command and returns the result.
            </summary>
            <param name="cmd">
            A <see cref="T:System.String"/> representing the command that winget should be executed with.
            </param>
            <returns>
            A <see cref="T:WGetNET.ProcessResult"/> object, 
            containing the output an exit id of the process.
            </returns>
        </member>
        <member name="M:WGetNET.ProcessManager.GetStartInfo(System.String)">
            <summary>
            Gets the start info for a process.
            </summary>
            <param name="cmd">
            String containig the arguments for the action.
            </param>
            <returns>
            A <see cref="T:System.Diagnostics.ProcessStartInfo"/> object, for the process.
            </returns>
        </member>
        <member name="M:WGetNET.ProcessManager.RunProcess(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Runs a process with the current start informations.
            </summary>
            <returns>
            A <see cref="T:WGetNET.ProcessResult"/> object, 
            containing the output an exit id of the process.
            </returns>
        </member>
        <member name="M:WGetNET.ProcessManager.RunProcessAsync(System.Diagnostics.ProcessStartInfo,System.Threading.CancellationToken)">
            <summary>
            Asynchronous runs a process with the current start informations.
            </summary>
            <returns>
            A <see cref="T:WGetNET.ProcessResult"/> object, 
            containing the output an exit id of the process.
            </returns>
        </member>
        <member name="M:WGetNET.ProcessManager.ReadSreamOutput(System.IO.StreamReader)">
            <summary>
            Reads the data from the process output to a string array.
            </summary>
            <param name="output">
            The <see cref="T:System.IO.StreamReader"/> with the process output.
            </param>
            <returns>
            A <see cref="T:System.String"/> array 
            containing the process output stream content by lines.
            </returns>
        </member>
        <member name="M:WGetNET.ProcessManager.ReadSreamOutputAsync(System.IO.StreamReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronous reads the data from the process output to a string array.
            </summary>
            <param name="output">
            The <see cref="T:System.IO.StreamReader"/> with the process output.
            </param>
            <returns>
            A <see cref="T:System.String"/> array 
            containing the process output stream content by lines.
            </returns>
        </member>
        <member name="T:WGetNET.WinGetInfo">
            <summary>
            The <see cref="T:WGetNET.WinGetInfo"/> class offers informations about the installed winget version.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetInfo.WinGetInstalled">
            <summary>
            Gets if winget is installed on the system.
            </summary>
            <returns>
            <see langword="true"/> if winget is installed or <see langword="false"/> if not.
            </returns>
        </member>
        <member name="P:WGetNET.WinGetInfo.WinGetVersion">
            <summary>
            Gets the version number of the winget installation.
            </summary>
            <returns>
            A <see cref="T:System.String"/> with the version number.
            </returns>
        </member>
        <member name="P:WGetNET.WinGetInfo.WinGetVersionObject">
            <summary>
            Gets the version number of the winget installation.
            </summary>
            <returns>
            A <see cref="T:System.Version"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetInfo"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetInfo.ExportSettings">
            <summary>
            Exports the WinGet settings to a json string.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the settings json.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetInfo.ExportSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronous exports the WinGet settings to a json string.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.String"/> containing the settings json.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetInfo.ExportSettingsToFile(System.String)">
            <summary>
            Exports the WinGet settings to a json and writes them to the given file.
            </summary>
            <param name="file">
            The file for the export.
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull, and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetInfo.ExportSettingsToFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronous exports the WinGet settings to a json and writes them to the given file.
            </summary>
            <param name="file">
            The file for the export.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was succesfull, and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="T:WGetNET.WinGetPackageManager">
            <summary>
            The <see cref="T:WGetNET.WinGetPackageManager"/> class offers methods to manage packages with winget.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetPackageManager"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.SearchPackage(System.String)">
            <summary>
            Uses the winget search function to search for a package that maches the given name.
            </summary>
            <param name="packageName">
            The name of the package for the search.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.SearchPackage(System.String,System.String)">
            <summary>
            Uses the winget search function to search for a package that maches the given name.
            </summary>
            <param name="packageName">
            The name of the package for the search.
            </param>
            <param name="sourceName">
            The name of the source for the search.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.SearchPackageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Uses the winget search function to asynchronously search for a package that maches the given name.
            </summary>
            <param name="packageName">
            The name of the package for the search.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.SearchPackageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Uses the winget search function to asynchronously search for a package that maches the given name.
            </summary>
            <param name="packageName">
            The name of the package for the search.
            </param>
            <param name="sourceName">
            The name of the source for the search.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackages">
            <summary>
            Gets a list of all installed packages.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackages(System.String)">
            <summary>
            Gets a list of all installed packages. That match the provided name.
            </summary>
            <param name="packageName">
            The name of the package for the search.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackages(System.String,System.String)">
            <summary>
            Gets a list of all installed packages. That match the provided name.
            </summary>
            <param name="packageName">
            The name of the package for the search.
            </param>
            <param name="sourceName">
            The name of the source for the search.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackagesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a list of all installed packages.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackagesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a list of all installed packages. That match the provided name.
            </summary>
            <param name="packageName">
            The name of the package for the search.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackagesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a list of all installed packages. That match the provided name.
            </summary>
            <param name="packageName">
            The name of the package for the search.
            </param>
            <param name="sourceName">
            The name of the source for the search.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackage(System.String)">
            <summary>
            Install a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for the installation.</param>
            <returns>
            <see langword="true"/> if the installation was successfull or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackage(WGetNET.WinGetPackage)">
            <summary>
            Install a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the installation.</param>
            <returns>
            <see langword="true"/> if the installation was successfull or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously install a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for the installation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the installation was successfull or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackageAsync(WGetNET.WinGetPackage,System.Threading.CancellationToken)">
            <summary>
            Asynchronously install a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the installation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the installation was successfull or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackage(System.String)">
            <summary>
            Uninsatll a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for uninstallation.</param>
            <returns>
            <see langword="true"/> if the uninstallation was successfull or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackage(WGetNET.WinGetPackage)">
            <summary>
            Uninstall a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the uninstallation.</param>
            <returns>
            <see langword="true"/> if the uninstallation was successfull or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously uninsatll a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for uninstallation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the uninstallation was successfull or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackageAsync(WGetNET.WinGetPackage,System.Threading.CancellationToken)">
            <summary>
            Asynchronously uninstall a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> for the uninstallation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the uninstallation was successfull or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetUpgradeablePackages">
            <summary>
            Get all upgradeable packages.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetUpgradeablePackagesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously get all upgradeable packages.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackage(System.String)">
            <summary>
            Upgrades a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for upgrade.</param>
            <returns>
            <see langword="true"/> if the upgrade was successfull or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackage(WGetNET.WinGetPackage)">
            <summary>
            Upgrades a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> that for the upgrade</param>
            <returns>
            <see langword="true"/> if the upgrade was successfull or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously upgrades a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for upgrade.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the upgrade was successfull or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackageAsync(WGetNET.WinGetPackage,System.Threading.CancellationToken)">
            <summary>
            Asynchronously upgrades a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.WinGetPackage"/> that for the upgrade</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the upgrade was successfull or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradeAllPackages">
            <summary>
            Tries to upgrade all packages using winget.
            </summary>
            <remarks>
            The action might run succesfully without upgrading every or even any package.
            </remarks>
            <returns>
            <see langword="true"/> if the action run successfully or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradeAllPackagesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously tries to upgrade all packages using winget.
            </summary>
            <remarks>
            The action might run succesfully without upgrading every or even any package.
            </remarks>
            <returns>
            <see langword="true"/> if the action run successfully or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ExportPackagesToFile(System.String)">
            <summary>
            Exports a list of all installed winget packages as json to the given file.
            </summary>
            <param name="file">The file for the export.</param>
            <returns>
            <see langword="true"/> if the export was successfull or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ExportPackagesToFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously exports a list of all installed winget packages as json to the given file.
            </summary>
            <param name="file">The file for the export.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the export was successfull or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ImportPackagesFromFile(System.String)">
            <summary>
            Imports packages and trys to installes/upgrade all pakages in the list, if possible.
            </summary>
            <remarks>
            This may take some time and winget may not install/upgrade all packages.
            </remarks>
            <param name="file">The file with the package data for the import.</param>
            <returns>
            <see langword="true"/> if the import was compleatly successfull or 
            <see langword="false"/> if some or all packages failed to install.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ImportPackagesFromFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously imports packages and trys to installes/upgrade all pakages in the list, if possible.
            </summary>
            <remarks>
            This may take some time and winget may not install/upgrade all packages.
            </remarks>
            <param name="file">The file with the package data for the import.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the import was compleatly successfull or 
            <see langword="false"/> if some or all packages failed to install.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.Hash(System.String)">
            <summary>
            Executes the WinGet hash function, to calculate the hash for the given file.
            </summary>
            <param name="file">
            A <see cref="T:System.String"/> containing the path to the file.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing the hash.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.Hash(System.IO.FileInfo)">
            <summary>
            Executes the WinGet hash function, to calculate the hash for the given file.
            </summary>
            <param name="file">
            A <see cref="T:System.IO.FileInfo"/> object, of the file the hash should be calculated for.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing the hash.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.HashAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the WinGet hash function, to calculate the hash for the given file.
            </summary>
            <param name="file">
            A <see cref="T:System.String"/> containing the path to the file.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.String"/> containing the hash.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.HashAsync(System.IO.FileInfo,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the WinGet hash function, to calculate the hash for the given file.
            </summary>
            <param name="file">
            A <see cref="T:System.IO.FileInfo"/> object, of the file the hash should be calculated for.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.String"/> containing the hash.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.HashResultToHash(WGetNET.ProcessResult)">
            <summary>
            Reads the hash from the WinGet hash action result.
            </summary>
            <param name="result">
            The <see cref="T:WGetNET.ProcessResult"/> object of the action.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing the hash value.
            </returns>
        </member>
        <member name="T:WGetNET.WinGetSourceManager">
            <summary>
            The <see cref="T:WGetNET.WinGetSourceManager"/> class offers methods to manage the sources used by winget.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetSourceManager"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.GetInstalledSources">
            <summary>
            Gets a list of all sources that are installed in winget.
            </summary>
            <remarks>
            Because the list source output is limited it is recommanded to use 
            <see cref="M:WGetNET.WinGetSourceManager.ExportSourcesToObject"/> instead.
            </remarks>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> instances.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.GetInstalledSourcesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a list of all sources that are installed in winget.
            </summary>
            <remarks>
            Because the list source output is limited it is recommanded to use 
            <see cref="M:WGetNET.WinGetSourceManager.ExportSourcesToObject"/> instead.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> instances.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSource(System.String,System.String)">
            <summary>
            Adds a new source to winget (Needs administrator rights).
            </summary>
            <remarks>
            The source type is optional but some sources like the "msstore" need it or adding it wil throw an error.
            </remarks>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source to add.
            </param>
            <param name="arg">
            A <see cref="T:System.String"/> representing the source (eg. URL).
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSource(System.String,System.String,System.String)">
            <summary>
            Adds a new source to winget (Needs administrator rights).
            </summary>
            <remarks>
            The source type is optional but some sources like the "msstore" need it or adding it wil throw an error.
            </remarks>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source to add.
            </param>
            <param name="arg">
            A <see cref="T:System.String"/> representing the source (eg. URL).
            </param>
            <param name="type">
            A <see cref="T:System.String"/> representing the source type.
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSource(WGetNET.WinGetSource)">
            <summary>
            Adds a new source to winget (Needs administrator rights).
            </summary>
            <remarks>
            The source type is optional but some sources like the "msstore" need it or adding it wil throw an error.
            </remarks>
            <param name="source">
            The <see cref="T:WGetNET.WinGetSource"/> to add.
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSourceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a new source to winget (Needs administrator rights).
            </summary>
            <remarks>
            The source type is optional but some sources like the "msstore" need it or adding it wil throw an error.
            </remarks>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source to add.
            </param>
            <param name="arg">
            A <see cref="T:System.String"/> representing the source (eg. URL).
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSourceAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a new source to winget (Needs administrator rights).
            </summary>
            <remarks>
            The source type is optional but some sources like the "msstore" need it or adding it wil throw an error.
            </remarks>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source to add.
            </param>
            <param name="arg">
            A <see cref="T:System.String"/> representing the source (eg. URL).
            </param>
            <param name="type">
            A <see cref="T:System.String"/> representing the source type.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSourceAsync(WGetNET.WinGetSource,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a new source to winget (Needs administrator rights).
            </summary>
            <remarks>
            The source type is optional but some sources like the "msstore" need it or adding it wil throw an error.
            </remarks>
            <param name="source">
            The <see cref="T:WGetNET.WinGetSource"/> to add.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.UpdateSources">
            <summary>
            Updates all sources that are installed in winget.
            </summary>
            <remarks>
            This may take a while depending on the sources.
            </remarks>
            <returns>
            <see langword="true"/> if the update was successfull or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.UpdateSourcesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates all sources that are installed in winget.
            </summary>
            <remarks>
            This may take a while depending on the sources.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the update was successfull or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSources">
            <summary>
            Exports the winget sources as a json string.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the winget sorces in json format.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSources(System.String)">
            <summary>
            Exports the winget sources as a json string.
            </summary>
            <param name="sourceName">The name of the source for the export.</param>
            <returns>
            A <see cref="T:System.String"/> that contains the winget sorces in json format.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSources(WGetNET.WinGetSource)">
            <summary>
            Exports the winget sources as a json string.
            </summary>
            <param name="source">
            The <see cref="T:WGetNET.WinGetSource"/> for the export.
            </param>
            <returns>
            A <see cref="T:System.String"/> that contains the winget sorces in json format.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously exports the winget sources as a json string.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.String"/> that contains the winget sorces in json format.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously exports the winget sources as a json string.
            </summary>
            <param name="sourceName">The name of the source for the export.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.String"/> that contains the winget sorces in json format.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesAsync(WGetNET.WinGetSource,System.Threading.CancellationToken)">
            <summary>
            Asynchronously exports the winget sources as a json string.
            </summary>
            <param name="source">
            The <see cref="T:WGetNET.WinGetSource"/> for the export.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.String"/> that contains the winget sorces in json format.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToObject">
            <summary>
            Exports the winget sources to a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToObject(System.String)">
            <summary>
            Exports the winget sources to a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToObjectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously exports the winget sources to a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToObjectAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously exports the winget sources to a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFile(System.String)">
            <summary>
            Exports the winget sources in json format to a file.
            </summary>
            <param name="file">The file for the export.</param>
            <returns>
            <see langword="true"/> if the export was successfull or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFile(System.String,System.String)">
            <summary>
            Exports the winget sources in json format to a file.
            </summary>
            <param name="file">The file for the export.</param>
            <param name="sourceName">The name of the source for the export.</param>
            <returns>
            <see langword="true"/> if the export was successfull or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFile(System.String,WGetNET.WinGetSource)">
            <summary>
            Exports the winget sources in json format to a file.
            </summary>
            <param name="file">
            The file for the export.
            </param>
            <param name="source">
            The <see cref="T:WGetNET.WinGetSource"/> for the export.
            </param>
            <returns>
            <see langword="true"/> if the export was successfull or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously exports the winget sources in json format to a file.
            </summary>
            <param name="file">The file for the export.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the export was successfull or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFileAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously exports the winget sources in json format to a file.
            </summary>
            <param name="file">The file for the export.</param>
            <param name="sourceName">The name of the source for the export.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the export was successfull or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFileAsync(System.String,WGetNET.WinGetSource,System.Threading.CancellationToken)">
            <summary>
            Asynchronously exports the winget sources in json format to a file.
            </summary>
            <param name="file">
            The file for the export.
            </param>
            <param name="source">
            The <see cref="T:WGetNET.WinGetSource"/> for the export.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the export was successfull or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportStringToSources(System.String)">
            <summary>
            Convert the string output from winget source export to a 
            <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects.
            </summary>
            <param name="exportString">
            A <see cref="T:System.String"/> containing the winget source export content.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportStringToSourcesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously convert the string output from winget source export to a 
            <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects.
            </summary>
            <param name="exportString">
            A <see cref="T:System.String"/> containing the winget source export content.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ImportSource(System.Collections.Generic.List{WGetNET.WinGetSource})">
            <summary>
            Imports sources into winget.
            </summary>
            <param name="winGetSources">
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects.
            </param>
            <returns>
            <see langword="true"/> if the action was successfull and <see langword="false"/> if on or more sorces failed.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ImportSource(WGetNET.WinGetSource)">
            <summary>
            Imports a source into winget.
            </summary>
            <param name="winGetSource">
            A <see cref="T:WGetNET.WinGetSource"/> objects.
            </param>
            <returns>
            <see langword="true"/> if the action was successfull and <see langword="false"/> if it failed.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ImportSource(System.String)">
            <summary>
            Imports a source into winget.
            </summary>
            <param name="jsonString">
            A <see cref="T:System.String"/> containing the json for ONE source.
            </param>
            <returns>
            <see langword="true"/> if the action was successfull and <see langword="false"/> if it failed.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ImportSourceAsync(System.Collections.Generic.List{WGetNET.WinGetSource},System.Threading.CancellationToken)">
            <summary>
            Asynchronously imports sources into winget.
            </summary>
            <param name="winGetSources">
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> objects.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was successfull and <see langword="false"/> if on or more sorces failed.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ImportSourceAsync(WGetNET.WinGetSource,System.Threading.CancellationToken)">
            <summary>
            Asynchronously imports a source into winget.
            </summary>
            <param name="winGetSource">
            A <see cref="T:WGetNET.WinGetSource"/> objects.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was successfull and <see langword="false"/> if it failed.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ImportSourceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously imports a source into winget.
            </summary>
            <param name="jsonString">
            A <see cref="T:System.String"/> containing the json for ONE source.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was successfull and <see langword="false"/> if it failed.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ResetSources">
            <summary>
            Resets all sources that are installed in winget (Needs administrator rights).
            </summary>
            <remarks>
            This may take a while depending on the sources.
            </remarks>
            <returns>
            <see langword="true"/> if the reset was successfull or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ResetSourcesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously resets all sources that are installed in winget (Needs administrator rights).
            </summary>
            <remarks>
            This may take a while depending on the sources.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the reset was successfull or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.RemoveSources(System.String)">
            <summary>
            Removes a source from winget (Needs administrator rights).
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source.
            </param>
            <returns>
            <see langword="true"/> if the remove was successfull or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.RemoveSources(WGetNET.WinGetSource)">
            <summary>
            Removes a source from winget (Needs administrator rights).
            </summary>
            <param name="source">
            The <see cref="T:WGetNET.WinGetSource"/> to remove.
            </param>
            <returns>
            <see langword="true"/> if the remove was successfull or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.RemoveSourcesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes a source from winget (Needs administrator rights).
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the remove was successfull or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.RemoveSourcesAsync(WGetNET.WinGetSource,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes a source from winget (Needs administrator rights).
            </summary>
            <param name="source">
            The <see cref="T:WGetNET.WinGetSource"/> to remove.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the remove was successfull or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="T:WGetNET.WinGetActionFailedException">
            <summary>
            Exception that gets thrown if a winget action failed.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetActionFailedException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetActionFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetActionFailedException"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetActionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetActionFailedException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
        </member>
        <member name="M:WGetNET.WinGetActionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetActionFailedException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WGetNET.WinGetActionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetActionFailedException"/> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:WGetNET.WinGetNotInstalledException">
            <summary>
            Exception that gets thrown if winget is not installed.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetNotInstalledException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetNotInstalledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetNotInstalledException"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetNotInstalledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetNotInstalledException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
        </member>
        <member name="M:WGetNET.WinGetNotInstalledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetNotInstalledException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WGetNET.WinGetNotInstalledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetNotInstalledException"/> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:WGetNET.HelperClasses.ArrayManager">
            <summary>
            The <see langword="static"/> <see cref="T:WGetNET.HelperClasses.ArrayManager"/> class,
            provieds methods to manage <see langword="array"/>'s.
            </summary>
        </member>
        <member name="M:WGetNET.HelperClasses.ArrayManager.Add``1(``0[],``0)">
            <summary>
            Adds a new entry to a <see langword="array"/>.
            </summary>
            <typeparam name="T">
            The type of the <see langword="array"/>.
            </typeparam>
            <param name="inputArray">
            The input <see langword="array"/>.
            </param>
            <param name="value">
            The value to add to the <see langword="array"/>.
            </param>
            <returns>
            The <see langword="array"/> with the added entry.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ArrayManager.RemoveRange``1(``0[],System.Int32,System.Int32)">
            <summary>
            Removes a range of entrys from a <see langword="array"/>.
            </summary>
            <typeparam name="T">
            The type of the <see langword="array"/>.
            </typeparam>
            <param name="inputArray">
            The input <see langword="array"/>.
            </param>
            <param name="index">
            A <see cref="T:System.Int32"/> representing the zero based start index.
            </param>
            <param name="count">
            A <see cref="T:System.Int32"/> representing the number of elements to remove.
            </param>
            <returns>
            The <see langword="array"/> with the range of entrys removed.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ArrayManager.GetEntryContains(System.String[],System.String)">
            <summary>
            Searches for an entry in a <see langword="array"/> that contains the given string.
            </summary>
            <param name="inputArray">
            The input <see langword="array"/>.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> representing the value to check for.
            </param>
            <returns>
            A <see cref="T:System.Int32"/> representing the index of the entry (-1 if the entry is not found).
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ArrayManager.CopyTo``1(``0[],System.Int32)">
            <summary>
            Copys a <see langword="array"/> to a new one.
            </summary>
            <typeparam name="T">
            The type of the array.
            </typeparam>
            <param name="inputArray">
            The <see langword="array"/> that should be copyed.
            </param>
            <param name="addLengthOf">
            A <see cref="T:System.Int32"/> representing a extra length,
            that should be added to the end of the new array. (DEFAULT = 0)
            </param>
            <returns>
            The new <see langword="array"/>.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ArrayManager.CopyToWithoutRange``1(``0[],System.Int32,System.Int32)">
            <summary>
            Copys a <see langword="array"/> to a new one, but ignores the given range.
            </summary>
            <typeparam name="T">
            The type of the array.
            </typeparam>
            <param name="inputArray">
            The <see langword="array"/> that should be copyed.
            </param>
            <param name="startIndex">
            A <see cref="T:System.Int32"/> representing a start index of the range that should be ignored.
            </param>
            <param name="count">
            A <see cref="T:System.Int32"/> representing the range that should be ignored.
            </param>
            <returns>
            The new <see langword="array"/>.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.FileHandler.ExportOutputToFile(WGetNET.ProcessResult,System.String)">
            <summary>
            Writes the export result to a file.
            </summary>
            <param name="result">
            The <see cref="T:WGetNET.ProcessResult"/> object containing the export data.
            </param>
            <param name="file">
            A <see cref="T:System.String"/> containing the file path and name.
            </param>
            <returns>
            <see langword="true"/> if the action was successfull and <see langword="false"/> if it failed.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.FileHandler.ExportOutputToFileAsync(WGetNET.ProcessResult,System.String)">
            <summary>
            Asynchronous writes the export result to a file.
            </summary>
            <param name="result">
            The <see cref="T:WGetNET.ProcessResult"/> object containing the export data.
            </param>
            <param name="file">
            A <see cref="T:System.String"/> containing the file path and name.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was successfull and <see langword="false"/> if it failed.
            </returns>
        </member>
        <member name="T:WGetNET.HelperClasses.JsonHandler">
            <summary>
            The <see langword="static"/> <see cref="T:WGetNET.HelperClasses.JsonHandler"/> class,
            provieds methods handle json actions.
            </summary>
        </member>
        <member name="M:WGetNET.HelperClasses.JsonHandler.StringToObject``1(System.String)">
            <summary>
            Deserializes a given json <see cref="T:System.String"/> to a object of the given class.
            </summary>
            <typeparam name="T">
            Class type the json should be deserialized to.
            </typeparam>
            <param name="jsonString">
            A <see cref="T:System.String"/> containing the json to deserialize.
            </param>
            <returns>
            A nullable object of the given class type. It will be <see langword="null"/> if the action failed.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.JsonHandler.StringToObjectAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deserializes a given json <see cref="T:System.String"/> to a object of the given class.
            </summary>
            <typeparam name="T">
            Class type the json should be deserialized to.
            </typeparam>
            <param name="jsonString">
            A <see cref="T:System.String"/> containing the json to deserialize.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a nullable object of the given class type. It will be <see langword="null"/> if the action failed.
            </returns>
        </member>
        <member name="T:WGetNET.HelperClasses.PrivilegeChecker">
            <summary>
            The <see langword="static"/> <see cref="T:WGetNET.HelperClasses.PrivilegeChecker"/> class,
            provides methods for checking user privileges.
            </summary>
        </member>
        <member name="M:WGetNET.HelperClasses.PrivilegeChecker.CheckAdministratorPrivileges">
            <summary>
            Check if the current user has administrator privileges.
            </summary>
            <returns>
            <see langword="true"/> if the current user has administrator privileges and
            <see langword="false"/> if not.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.PrivilegeChecker.CurrentUserIsAdmin">
            <summary>
            Checks if the current user is an administrator.
            </summary>
            <returns>
            <see langword="true"/> if the user is a admin and <see langword="false"/> if not.
            </returns>
        </member>
        <member name="T:WGetNET.HelperClasses.ProcessOutputReader">
            <summary>
            The <see langword="static"/> <see cref="T:WGetNET.HelperClasses.ProcessOutputReader"/> class,
            provieds <see langword="static"/> methodes to process the output of the winget processes.
            </summary>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ToPackageList(System.String[],WGetNET.PackageAction,System.String)">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.List`1"/> 
            of output lines from a winget process to a list of <see cref="T:WGetNET.WinGetPackage"/>'s.
            </summary>
            <param name="output">
            A <see cref="T:System.Collections.Generic.List`1"/> of output lines from a winget process.
            </param>
            <param name="action">
            Sets info about the action that is executet.
            </param>
            <param name="sourceName">
            Name of the source used in the search or list by source action.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/>'s.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.CreatePackageListFromOutput(System.String[],System.Int32[],WGetNET.PackageAction,System.String)">
            <summary>
            Creates a package list from output.
            </summary>
            <param name="output">
            The <see langword="array"/> containing the output.
            </param>
            <param name="columnList">
            A <see cref="T:System.Int32"/> <see langword="array"/> containing the column start indexes.
            </param>
            <param name="action">
            Sets info about the action that is executet.
            </param>
            <param name="sourceName">
            Name of the source used in the search or list by source action.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/>'s.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ToSourceList(System.String[])">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.List`1"/> 
            of output lines from a winget process to a list of <see cref="T:WGetNET.WinGetSource"/>'s.
            </summary>
            <param name="output">
            A <see cref="T:System.Collections.Generic.List`1"/> of output lines from a winget process.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/>'s.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ExportOutputToString(WGetNET.ProcessResult)">
            <summary>
            Writes the export result to a <see cref="T:System.String"/>.
            </summary>
            <param name="result">
            The <see cref="T:WGetNET.ProcessResult"/> object containing the export data.
            </param>
            <returns>
            The <see cref="T:System.String"/> containing the export result.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.CreateSourceListFromOutput(System.String[],System.Int32[])">
            <summary>
            Creates a source list from output.
            </summary>
            <param name="output">
            The <see langword="array"/> containing the output.
            </param>
            <param name="columnList">
            A <see cref="T:System.Int32"/> <see langword="array"/> containing the column start indexes.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/>'s.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.GetColumnList(System.String)">
            <summary>
            Gets all column start indexes from the input line.
            </summary>
            <param name="line">
            A <see cref="T:System.String"/> containing the header, for column calculation.
            </param>
            <returns>
            A <see cref="T:System.Int32"/> <see langword="array"/> containing the column start indexes.
            </returns>
        </member>
        <member name="P:WGetNET.ProcessResult.ExitCode">
            <summary>
            Gets or sets the exit code of the process.
            </summary>
        </member>
        <member name="P:WGetNET.ProcessResult.Output">
            <summary>
            Gets or sets the output of the process.
            </summary>
        </member>
        <member name="P:WGetNET.ProcessResult.Success">
            <summary>
            Gets if the process finished successfully.
            </summary>
        </member>
        <member name="T:WGetNET.WinGetPackage">
            <summary>
            Represents a winget package
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.PackageName">
            <summary>
            Gets or sets the name of the package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.PackageId">
            <summary>
            Gets or sets the id of the package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.PackageVersion">
            <summary>
            Gets or sets the version of the package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.PackageAvailableVersion">
            <summary>
            Gets or sets the newest available version of the package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.PackageSourceName">
            <summary>
            Gets or sets the source name for the package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.IsEmpty">
            <summary>
            Gets if the object is empty.
            </summary>
        </member>
        <member name="T:WGetNET.WinGetSource">
            <summary>
            Represents a winget source
            </summary>
        </member>
        <member name="P:WGetNET.WinGetSource.SourceName">
            <summary>
            Gets or sets the name of the source.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetSource.SourceUrl">
            <summary>
            Gets or sets the url of the source.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetSource.SourceType">
            <summary>
            Gets or sets the type of the source.
            </summary>
            <remarks>
            Will only be set on source export.
            </remarks>
        </member>
        <member name="P:WGetNET.WinGetSource.SourceData">
            <summary>
            Gets or sets the data of the source.
            </summary>
            <remarks>
            Will only be set on source export.
            </remarks>
        </member>
        <member name="P:WGetNET.WinGetSource.SourceIdentifier">
            <summary>
            Gets or sets the identifier of the source.
            </summary>
            <remarks>
            Will only be set on source export.
            </remarks>
        </member>
        <member name="P:WGetNET.WinGetSource.IsEmpty">
            <summary>
            Gets if the object is empty.
            </summary>
        </member>
    </members>
</doc>
